// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

export class Column extends pulumi.CustomResource {
    /**
     * Get an existing Column resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Column {
        return new Column(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'honeycomb:resources:Column';

    /**
     * Returns true if the given object is an instance of Column.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Column {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Column.__pulumiType;
    }

    public /*out*/ readonly columnId!: pulumi.Output<string>;
    public readonly dataset!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string>;
    public readonly hidden!: pulumi.Output<boolean>;
    public readonly name!: pulumi.Output<string>;
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a Column resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ColumnArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.dataset === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dataset'");
            }
            if ((!args || args.name === undefined) && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["dataset"] = args ? args.dataset : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["hidden"] = args ? args.hidden : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["columnId"] = undefined /*out*/;
        } else {
            resourceInputs["columnId"] = undefined /*out*/;
            resourceInputs["dataset"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["hidden"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Column.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Column resource.
 */
export interface ColumnArgs {
    dataset: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    hidden?: pulumi.Input<boolean>;
    name: pulumi.Input<string>;
    type: pulumi.Input<enums.resources.ColumnType>;
}
